import { ReactionFunction } from "../reaction-function";
import {
  AreaPacket,
  SendScrobbleReportByEmailInfos,
  sendMail,
  GetWeeklyScobblesResponse,
	getWeeklyScobbles,
	Track,
} from "@area/shared";

export const handleSendScrobbleReportByMailReaction: ReactionFunction = async (
  packet: AreaPacket
) => {
	console.log("Handling SendScrobbleReportByMailReaction");
  const reaction = packet.area.reaction.informations as SendScrobbleReportByEmailInfos;
  const data: GetWeeklyScobblesResponse | null = await getWeeklyScobbles(
    reaction.username,
    process.env.LASTFM_API_KEY || ""
  );

  if (data === null) {
		console.error("No data found for the given username");
		return;
  }

  if (
    !data.weeklytrackchart.track ||
    data.weeklytrackchart.track.length === 0
  ) {
    const noTracksEmailBody = `
          <!DOCTYPE html>
          <html>
          <head>
            <style>
              body {
                font-family: Arial, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 600px;
                margin: 0 auto;
                padding: 20px;
              }
            </style>
          </head>
          <body>
            <h2>Weekly Music Recap</h2>
            <p>No tracks were played this week.</p>
            <p style="margin-top: 20px; color: #666; font-size: 0.8em;">
              Generated by your weekly music tracking system
            </p>
          </body>
          </html>
        `;
    await sendMail(reaction.to, reaction.subject, noTracksEmailBody, "html");
    return;
  }

  const totalTracksAvailable = data.weeklytrackchart.track.length;
  const tracksToDisplay = Math.min(reaction.nb_tracks, totalTracksAvailable);
  const firstXTracks: Track[] = data.weeklytrackchart.track.slice(
    0,
    tracksToDisplay
  );

  const emailBody = `
        <!DOCTYPE html>
        <html>
        <head>
          <style>
            body {
              font-family: Arial, sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 600px;
              margin: 0 auto;
              padding: 20px;
            }
            .highlight {
              font-weight: bold;
              color: #1db954;
            }
            .track-list {
              list-style-type: none;
              padding: 0;
            }
            .track-item {
              margin: 10px 0;
              padding: 10px;
              border-bottom: 1px solid #eee;
            }
            .playcount {
              color: #666;
              font-size: 0.9em;
            }
            .note {
              color: #666;
              font-style: italic;
              margin: 10px 0;
            }
          </style>
        </head>
        <body>
          <h2>Your Weekly Music Recap</h2>
          
          ${
            firstXTracks.length > 0
              ? `
            <p>Your most played track this week is: 
              <span class="highlight">${firstXTracks[0].name}</span> by 
              <span class="highlight">${firstXTracks[0].artist["#text"]}</span>!
            </p>
          `
              : ""
          }
    
          <h3>Your Top ${tracksToDisplay} Tracks This Week:</h3>
          ${
            reaction.nb_tracks > totalTracksAvailable
              ? `<p class="note">Note: You requested ${reaction.nb_tracks} tracks, but you only played ${totalTracksAvailable} different tracks this week.</p>`
              : ""
          }
          
          <ul class="track-list">
            ${firstXTracks
              .map(
                (track, index) => `
              <li class="track-item">
                ${index + 1}. <span class="highlight">${track.name}</span>
                by <span class="highlight">${track.artist["#text"]}</span>
                <span class="playcount">(${track.playcount} plays)</span>
              </li>
            `
              )
              .join("")}
          </ul>
    
          <p style="margin-top: 20px; color: #666; font-size: 0.8em;">
            Generated by your weekly music tracking system
          </p>
        </body>
        </html>
      `;

  await sendMail(reaction.to, reaction.subject, emailBody, "html");
};
